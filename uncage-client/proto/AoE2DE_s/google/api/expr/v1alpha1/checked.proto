syntax = "proto3";

package google.api.expr.v1alpha1;

import "google/api/expr/v1alpha1/syntax.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/api/expr/v1alpha1;expr";
option java_multiple_files = true;
option java_outer_classname = "DeclProto";
option java_package = "com.google.api.expr.v1alpha1";

message CheckedExpr {
    map<int64, Reference> reference_map = 2;
    map<int64, Type> type_map = 3;
    SourceInfo source_info = 5;
    Expr expr = 4;
}

message Type {
    oneof type_kind {
        protobuf.Empty dyn = 1;
        protobuf.NullValue null = 2;
        PrimitiveType primitive = 3;
        PrimitiveType wrapper = 4;
        WellKnownType well_known = 5;
        ListType list_type = 6;
        MapType map_type = 7;
        FunctionType function = 8;
        string message_type = 9;
        string type_param = 10;
        Type type = 11;
        protobuf.Empty error = 12;
        AbstractType abstract_type = 14;
    }
    
    message ListType {
        Type elem_type = 1;
    }
    
    message MapType {
        Type key_type = 1;
        Type value_type = 2;
    }
    
    message FunctionType {
        Type result_type = 1;
        repeated Type arg_types = 2;
    }
    
    message AbstractType {
        string name = 1;
        repeated Type parameter_types = 2;
    }
    
    enum PrimitiveType {
        PRIMITIVE_TYPE_UNSPECIFIED = 0;
        BOOL = 1;
        INT64 = 2;
        UINT64 = 3;
        DOUBLE = 4;
        STRING = 5;
        BYTES = 6;
    }
    
    enum WellKnownType {
        WELL_KNOWN_TYPE_UNSPECIFIED = 0;
        ANY = 1;
        TIMESTAMP = 2;
        DURATION = 3;
    }
}

message Decl {
    string name = 1;
    
    oneof decl_kind {
        IdentDecl ident = 2;
        FunctionDecl function = 3;
    }
    
    message IdentDecl {
        Type type = 1;
        Constant value = 2;
        string doc = 3;
    }
    
    message FunctionDecl {
        repeated Overload overloads = 1;
        message Overload {
            string overload_id = 1;
            repeated Type params = 2;
            repeated string type_params = 3;
            Type result_type = 4;
            bool is_instance_function = 5;
            string doc = 6;
        }
    }
}

message Reference {
    string name = 1;
    repeated string overload_id = 3;
    Constant value = 4;
}
